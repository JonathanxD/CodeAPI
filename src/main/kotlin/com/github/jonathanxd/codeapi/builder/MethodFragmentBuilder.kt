/*
 *      CodeAPI - Framework to generate Java code and Bytecode code. <https://github.com/JonathanxD/CodeAPI>
 *
 *         The MIT License (MIT)
 *
 *      Copyright (c) 2017 TheRealBuggy/JonathanxD (https://github.com/JonathanxD/ & https://github.com/TheRealBuggy/) <jonathan.scripter@programmer.net>
 *      Copyright (c) contributors
 *
 *
 *      Permission is hereby granted, free of charge, to any person obtaining a copy
 *      of this software and associated documentation files (the "Software"), to deal
 *      in the Software without restriction, including without limitation the rights
 *      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *      copies of the Software, and to permit persons to whom the Software is
 *      furnished to do so, subject to the following conditions:
 *
 *      The above copyright notice and this permission notice shall be included in
 *      all copies or substantial portions of the Software.
 *
 *      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *      THE SOFTWARE.
 */
package com.github.jonathanxd.codeapi.builder

import com.github.jonathanxd.codeapi.base.MethodFragment
import com.github.jonathanxd.codeapi.base.impl.MethodFragmentImpl

// Generated by BuilderGen
open class MethodFragmentBuilder() : MethodFragment.Builder<MethodFragment, MethodFragmentBuilder> {

    /**
     * See [MethodFragment.target]
     */
    lateinit var target: com.github.jonathanxd.codeapi.CodePart

    /**
     * See [MethodFragment.localization]
     */
    lateinit var localization: com.github.jonathanxd.codeapi.type.CodeType

    /**
     * See [MethodFragment.declaration]
     */
    lateinit var declaration: com.github.jonathanxd.codeapi.base.MethodDeclaration

    /**
     * See [MethodFragment.arguments]
     */
    var arguments: kotlin.collections.List<com.github.jonathanxd.codeapi.CodePart> = emptyList()

    /**
     * See [MethodFragment.scope]
     */
    lateinit var scope: com.github.jonathanxd.codeapi.common.Scope

    /**
     * See [MethodFragment.declaringType]
     */
    lateinit var declaringType: com.github.jonathanxd.codeapi.base.TypeDeclaration

    /**
     * See [MethodFragment.spec]
     */
    lateinit var spec: com.github.jonathanxd.codeapi.base.MethodSpecification

    /**
     * See [MethodFragment.invokeType]
     */
    lateinit var invokeType: com.github.jonathanxd.codeapi.common.InvokeType

    /**
     * See [MethodFragment.invokeDynamic]
     */
    var invokeDynamic: com.github.jonathanxd.codeapi.common.InvokeDynamic? = null

    constructor(defaults: MethodFragment) : this() {
        this.target = defaults.target
        this.localization = defaults.localization
        this.declaration = defaults.declaration
        this.arguments = defaults.arguments
        this.scope = defaults.scope
        this.declaringType = defaults.declaringType
        this.spec = defaults.spec
        this.invokeType = defaults.invokeType
        this.invokeDynamic = defaults.invokeDynamic
    }


    /**
     * See [MethodFragment.target]
     */
    override fun withTarget(value: com.github.jonathanxd.codeapi.CodePart): MethodFragmentBuilder {
        this.target = value
        return this
    }


    /**
     * See [MethodFragment.localization]
     */
    override fun withLocalization(value: com.github.jonathanxd.codeapi.type.CodeType): MethodFragmentBuilder {
        this.localization = value
        return this
    }


    /**
     * See [MethodFragment.declaration]
     */
    override fun withDeclaration(value: com.github.jonathanxd.codeapi.base.MethodDeclaration): MethodFragmentBuilder {
        this.declaration = value
        return this
    }


    /**
     * See [MethodFragment.arguments]
     */
    override fun withArguments(value: kotlin.collections.List<com.github.jonathanxd.codeapi.CodePart>): MethodFragmentBuilder {
        this.arguments = value
        return this
    }


    /**
     * See [MethodFragment.arguments]
     */
    override fun withArguments(vararg values: com.github.jonathanxd.codeapi.CodePart): MethodFragmentBuilder {
        this.arguments = values.toList()
        return this
    }


    /**
     * See [MethodFragment.scope]
     */
    override fun withScope(value: com.github.jonathanxd.codeapi.common.Scope): MethodFragmentBuilder {
        this.scope = value
        return this
    }


    /**
     * See [MethodFragment.declaringType]
     */
    override fun withDeclaringType(value: com.github.jonathanxd.codeapi.base.TypeDeclaration): MethodFragmentBuilder {
        this.declaringType = value
        return this
    }


    /**
     * See [MethodFragment.spec]
     */
    override fun withSpec(value: com.github.jonathanxd.codeapi.base.MethodSpecification): MethodFragmentBuilder {
        this.spec = value
        return this
    }


    /**
     * See [MethodFragment.invokeType]
     */
    override fun withInvokeType(value: com.github.jonathanxd.codeapi.common.InvokeType): MethodFragmentBuilder {
        this.invokeType = value
        return this
    }


    /**
     * See [MethodFragment.invokeDynamic]
     */
    override fun withInvokeDynamic(value: com.github.jonathanxd.codeapi.common.InvokeDynamic?): MethodFragmentBuilder {
        this.invokeDynamic = value
        return this
    }

    override fun build(): MethodFragment = MethodFragmentImpl(
            target = this.target,
            localization = this.localization,
            declaration = this.declaration,
            arguments = this.arguments,
            scope = this.scope,
            declaringType = this.declaringType,
            spec = this.spec,
            invokeType = this.invokeType,
            invokeDynamic = this.invokeDynamic
    )


    companion object {
        @JvmStatic
        fun builder() = MethodFragmentBuilder()
    }
}
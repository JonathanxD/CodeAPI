/*
 *      CodeAPI - Framework to generate Java code and Bytecode code. <https://github.com/JonathanxD/CodeAPI>
 *
 *         The MIT License (MIT)
 *
 *      Copyright (c) 2017 TheRealBuggy/JonathanxD (https://github.com/JonathanxD/ & https://github.com/TheRealBuggy/) <jonathan.scripter@programmer.net>
 *      Copyright (c) contributors
 *
 *
 *      Permission is hereby granted, free of charge, to any person obtaining a copy
 *      of this software and associated documentation files (the "Software"), to deal
 *      in the Software without restriction, including without limitation the rights
 *      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *      copies of the Software, and to permit persons to whom the Software is
 *      furnished to do so, subject to the following conditions:
 *
 *      The above copyright notice and this permission notice shall be included in
 *      all copies or substantial portions of the Software.
 *
 *      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *      THE SOFTWARE.
 */
package com.github.jonathanxd.codeapi.builder

import com.github.jonathanxd.codeapi.base.impl.MethodDeclarationImpl
import com.github.jonathanxd.codeapi.base.MethodDeclaration

// Generated by BuilderGen
class MethodDeclarationBuilder(): Builder<MethodDeclaration, MethodDeclarationBuilder>() {

    /**
     * See [MethodDeclaration.parameters]
     */
    var parameters: kotlin.collections.List<com.github.jonathanxd.codeapi.common.CodeParameter> = emptyList()

    /**
     * See [MethodDeclaration.name]
     */
    lateinit var name: kotlin.String

    /**
     * See [MethodDeclaration.annotations]
     */
    var annotations: kotlin.collections.List<com.github.jonathanxd.codeapi.base.Annotation> = emptyList()

    /**
     * See [MethodDeclaration.body]
     */
    var body: com.github.jonathanxd.codeapi.CodeSource? = null

    /**
     * See [MethodDeclaration.returnType]
     */
    lateinit var returnType: com.github.jonathanxd.codeapi.type.CodeType

    /**
     * See [MethodDeclaration.modifiers]
     */
    var modifiers: kotlin.collections.Set<com.github.jonathanxd.codeapi.common.CodeModifier> = emptySet()

    /**
     * See [MethodDeclaration.genericSignature]
     */
    var genericSignature: com.github.jonathanxd.codeapi.generic.GenericSignature = com.github.jonathanxd.codeapi.generic.GenericSignature.empty()

    constructor(defaults: MethodDeclaration) : this() {
        this.parameters = defaults.parameters
        this.name = defaults.name
        this.annotations = defaults.annotations
        this.body = defaults.body
        this.returnType = defaults.returnType
        this.modifiers = defaults.modifiers
        this.genericSignature = defaults.genericSignature
    }


    /**
     * See [MethodDeclaration.parameters]
     */
    fun withParameters(value: kotlin.collections.List<com.github.jonathanxd.codeapi.common.CodeParameter>): MethodDeclarationBuilder {
        this.parameters = value
        return this
    }


    /**
     * See [MethodDeclaration.parameters]
     */
    fun withParameters(vararg values: com.github.jonathanxd.codeapi.common.CodeParameter): MethodDeclarationBuilder {
        this.parameters = values.toList()
        return this
    }


    /**
     * See [MethodDeclaration.name]
     */
    fun withName(value: kotlin.String): MethodDeclarationBuilder {
        this.name = value
        return this
    }


    /**
     * See [MethodDeclaration.annotations]
     */
    fun withAnnotations(value: kotlin.collections.List<com.github.jonathanxd.codeapi.base.Annotation>): MethodDeclarationBuilder {
        this.annotations = value
        return this
    }


    /**
     * See [MethodDeclaration.annotations]
     */
    fun withAnnotations(vararg values: com.github.jonathanxd.codeapi.base.Annotation): MethodDeclarationBuilder {
        this.annotations = values.toList()
        return this
    }


    /**
     * See [MethodDeclaration.body]
     */
    fun withBody(value: com.github.jonathanxd.codeapi.CodeSource?): MethodDeclarationBuilder {
        this.body = value
        return this
    }


    /**
     * See [MethodDeclaration.returnType]
     */
    fun withReturnType(value: com.github.jonathanxd.codeapi.type.CodeType): MethodDeclarationBuilder {
        this.returnType = value
        return this
    }


    /**
     * See [MethodDeclaration.modifiers]
     */
    fun withModifiers(value: kotlin.collections.Set<com.github.jonathanxd.codeapi.common.CodeModifier>): MethodDeclarationBuilder {
        this.modifiers = value
        return this
    }


    /**
     * See [MethodDeclaration.modifiers]
     */
    fun withModifiers(vararg values: com.github.jonathanxd.codeapi.common.CodeModifier): MethodDeclarationBuilder {
        this.modifiers = values.toSet()
        return this
    }


    /**
     * See [MethodDeclaration.genericSignature]
     */
    fun withGenericSignature(value: com.github.jonathanxd.codeapi.generic.GenericSignature): MethodDeclarationBuilder {
        this.genericSignature = value
        return this
    }

    override fun build(): MethodDeclaration = MethodDeclarationImpl(
            parameters = this.parameters,
            name = this.name,
            annotations = this.annotations,
            body = this.body,
            returnType = this.returnType,
            modifiers = this.modifiers,
            genericSignature = this.genericSignature
    )


    companion object {
        @JvmStatic
        fun builder() = MethodDeclarationBuilder()
    }
}
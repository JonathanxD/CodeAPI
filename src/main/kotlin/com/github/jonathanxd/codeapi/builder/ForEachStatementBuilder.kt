/*
 *      CodeAPI - Framework to generate Java code and Bytecode code. <https://github.com/JonathanxD/CodeAPI>
 *
 *         The MIT License (MIT)
 *
 *      Copyright (c) 2017 TheRealBuggy/JonathanxD (https://github.com/JonathanxD/ & https://github.com/TheRealBuggy/) <jonathan.scripter@programmer.net>
 *      Copyright (c) contributors
 *
 *
 *      Permission is hereby granted, free of charge, to any person obtaining a copy
 *      of this software and associated documentation files (the "Software"), to deal
 *      in the Software without restriction, including without limitation the rights
 *      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *      copies of the Software, and to permit persons to whom the Software is
 *      furnished to do so, subject to the following conditions:
 *
 *      The above copyright notice and this permission notice shall be included in
 *      all copies or substantial portions of the Software.
 *
 *      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *      THE SOFTWARE.
 */
package com.github.jonathanxd.codeapi.builder

import com.github.jonathanxd.codeapi.base.impl.ForEachStatementImpl
import com.github.jonathanxd.codeapi.base.ForEachStatement

// Generated by BuilderGen
class ForEachStatementBuilder(): Builder<ForEachStatement, ForEachStatementBuilder>() {

    /**
     * See [ForEachStatement.variable]
     */
    lateinit var variable: com.github.jonathanxd.codeapi.base.VariableDeclaration

    /**
     * See [ForEachStatement.iterationType]
     */
    lateinit var iterationType: com.github.jonathanxd.codeapi.common.IterationType

    /**
     * See [ForEachStatement.iterableElement]
     */
    lateinit var iterableElement: com.github.jonathanxd.codeapi.CodePart

    /**
     * See [ForEachStatement.body]
     */
    var body: com.github.jonathanxd.codeapi.CodeSource? = null

    constructor(defaults: ForEachStatement) : this() {
        this.variable = defaults.variable
        this.iterationType = defaults.iterationType
        this.iterableElement = defaults.iterableElement
        this.body = defaults.body
    }


    /**
     * See [ForEachStatement.variable]
     */
    fun withVariable(value: com.github.jonathanxd.codeapi.base.VariableDeclaration): ForEachStatementBuilder {
        this.variable = value
        return this
    }


    /**
     * See [ForEachStatement.iterationType]
     */
    fun withIterationType(value: com.github.jonathanxd.codeapi.common.IterationType): ForEachStatementBuilder {
        this.iterationType = value
        return this
    }


    /**
     * See [ForEachStatement.iterableElement]
     */
    fun withIterableElement(value: com.github.jonathanxd.codeapi.CodePart): ForEachStatementBuilder {
        this.iterableElement = value
        return this
    }


    /**
     * See [ForEachStatement.body]
     */
    fun withBody(value: com.github.jonathanxd.codeapi.CodeSource?): ForEachStatementBuilder {
        this.body = value
        return this
    }

    override fun build(): ForEachStatement = ForEachStatementImpl(
            variable = this.variable,
            iterationType = this.iterationType,
            iterableElement = this.iterableElement,
            body = this.body
    )


    companion object {
        @JvmStatic
        fun builder() = ForEachStatementBuilder()
    }
}